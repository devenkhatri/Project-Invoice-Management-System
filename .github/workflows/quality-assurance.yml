name: Quality Assurance Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run ESLint (Frontend)
      run: cd frontend && npm run lint
    
    - name: Run ESLint (Backend)
      run: cd backend && npm run lint
    
    - name: Check code formatting (Frontend)
      run: cd frontend && npm run format:check
    
    - name: Check code formatting (Backend)
      run: cd backend && npm run format:check
    
    - name: TypeScript type checking (Frontend)
      run: cd frontend && npx tsc --noEmit
    
    - name: TypeScript type checking (Backend)
      run: cd backend && npx tsc --noEmit

  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run npm audit (Frontend)
      run: cd frontend && npm audit --audit-level=moderate
    
    - name: Run npm audit (Backend)
      run: cd backend && npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run frontend unit tests
      run: cd frontend && npm run test:coverage
    
    - name: Run backend unit tests
      run: cd backend && npm run test:coverage
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
    
    - name: Check coverage thresholds
      run: |
        cd frontend && npm run test:coverage -- --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
        cd ../backend && npm run test:coverage -- --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'

  accessibility-tests:
    runs-on: ubuntu-latest
    name: Accessibility Testing
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: cd frontend && npm ci
    
    - name: Run accessibility tests
      run: cd frontend && npm run test:a11y
    
    - name: Build application
      run: cd frontend && npm run build
    
    - name: Start application
      run: |
        cd frontend && npm start &
        sleep 30
    
    - name: Run Lighthouse accessibility audit
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true

  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Start backend server
      run: |
        cd backend && npm run build && npm start &
        sleep 10
      env:
        NODE_ENV: test
        GOOGLE_SHEETS_ID: ${{ secrets.TEST_GOOGLE_SHEETS_ID }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
    
    - name: Start frontend application
      run: |
        cd frontend && npm run build && npx serve -s build -p 3000 &
        sleep 10
    
    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v5
      with:
        working-directory: frontend
        wait-on: 'http://localhost:3000, http://localhost:3001'
        wait-on-timeout: 120
        browser: chrome
        record: true
        parallel: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: frontend/cypress/videos

  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Testing
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: cd backend && npm ci
    
    - name: Install Artillery
      run: npm install -g artillery@latest
    
    - name: Start backend server
      run: |
        cd backend && npm run build && npm start &
        sleep 10
      env:
        NODE_ENV: test
        GOOGLE_SHEETS_ID: ${{ secrets.TEST_GOOGLE_SHEETS_ID }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
    
    - name: Run performance tests
      run: cd backend && npm run test:performance
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: backend/artillery-report.json

  cross-browser-tests:
    runs-on: ubuntu-latest
    name: Cross-Browser Testing
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Start servers
      run: |
        cd backend && npm run build && npm start &
        cd frontend && npm run build && npx serve -s build -p 3000 &
        sleep 30
      env:
        NODE_ENV: test
    
    - name: Run Playwright tests
      run: cd frontend && npx playwright test --project=${{ matrix.browser }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: frontend/test-results/

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Check
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Check for outdated packages
      run: |
        cd frontend && npm outdated || true
        cd ../backend && npm outdated || true
    
    - name: Run dependency audit
      run: |
        cd frontend && npm audit --audit-level=moderate
        cd ../backend && npm audit --audit-level=moderate
    
    - name: Check license compliance
      run: |
        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --excludePrivatePackages

  quality-gate:
    runs-on: ubuntu-latest
    name: Quality Gate
    needs: [code-quality, security-scan, unit-tests, accessibility-tests, e2e-tests, performance-tests, dependency-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.accessibility-tests.result }}" != "success" ]]; then
          echo "Accessibility tests failed"
          exit 1
        fi
        if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
          echo "E2E tests failed"
          exit 1
        fi
        if [[ "${{ needs.performance-tests.result }}" != "success" ]]; then
          echo "Performance tests failed"
          exit 1
        fi
        if [[ "${{ needs.dependency-check.result }}" != "success" ]]; then
          echo "Dependency check failed"
          exit 1
        fi
        echo "All quality gates passed!"
    
    - name: Post quality gate results
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Security Scan': '${{ needs.security-scan.result }}',
            'Unit Tests': '${{ needs.unit-tests.result }}',
            'Accessibility': '${{ needs.accessibility-tests.result }}',
            'E2E Tests': '${{ needs.e2e-tests.result }}',
            'Performance': '${{ needs.performance-tests.result }}',
            'Dependencies': '${{ needs.dependency-check.result }}'
          };
          
          let comment = '## Quality Gate Results\n\n';
          for (const [check, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '✅' : '❌';
            comment += `${emoji} **${check}**: ${result}\n`;
          }
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }